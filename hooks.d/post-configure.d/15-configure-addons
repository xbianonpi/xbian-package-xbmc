
[ ! -e $XBIANROOT/common.functions ] || . $XBIANROOT/common.functions && { [ ! -e ../env ] || rexp ../env; }

CMP=
[ -d cmake/addons ] && CMP=cmake
[ -d project/cmake/addons ] && CMP=project/cmake
[ -z "$CMP" ] && exit 0

cd $CMP
rm -rf addons/build

[ ! -e addons/build/Makefile ] || eval $config_build_env make -C addons/build clean kodiplatform_DIR=$(readlink -f ./addons/depends) || :

# CMake makes some strange things if running multiple times with already
# existing CMakeCache.txt. So it's better to remove before running cmake
[ -e addons/build/CMakeCache.txt ] && rm -f addons/build/CMakeCache.txt || :

if eval $config_build_env c++ --version 2>/dev/null | grep -q "4.6"; then
    echo "Warning: You are using g++ 4.6, pvr.vbox and pvr.stalker will currently not compiled without errors, so removing it from source tree"
    echo "         If you need this addon, you have to use g++ 4.7"
    [ -d ./addons/addons/pvr.vbox ] && rm -rf ./addons/addons/pvr.vbox || :
    [ -d ./addons/addons/pvr.stalker ] && rm -rf ./addons/addons/pvr.stalker || :
fi

if [ "$config_build_addons" = "all" ] || [ "$config_build_addons" = "" ]; then
    print_log info "Processing blacklist"
    RF=/tmp/repo-binary-addons/
    [ -d $RF ] && rm -rf $RF || :
    git clone --depth 1 https://github.com/xbmc/repo-binary-addons $RF

    PADDS=$(find $RF -mindepth 1 -maxdepth 1 -type d | grep -v "\.git" | sort)
    config_build_addons=""

    for AP in $PADDS; do
        A=${AP##*/}
        for B in $config_blacklisted_addons; do [ "$B" = "$A" ] && { AP=; break; }; done
        ! [ "$AP" = "" ] && { for B in $config_blacklisted_addons_extra; do [ "$B" = "$A" ] && { AP=; break; }; done; }
        ! [ "$AP" = "" ] && { print_log inf "Added $A"; config_build_addons+="$A "; } || print_log inf "Blacklisted $A"
    done

    print_log inf $config_build_addons
fi

mkdir -p addons/build && cd addons/build

PREFIX=/usr/local
eval $config_build_env cmake $CMAKECONF -DADDONS_TO_BUILD=\"$config_build_addons\" -DOVERRIDE_PATHS=1 -DCMAKE_INSTALL_DESTDIR=$PREFIX -DCMAKE_INSTALL_PREFIX=$XBIANPKGDIR/content/$PREFIX \
  -DBUILD_DIR=$(readlink -f ./) -DCMAKE_RULE_MESSAGES=OFF -DADDON_DEPENDS_PATH=$(readlink -f ./depends) ..


# Extra addons have to proceed separately. That gives us the opportunity to
# supply patches if needed
#
for addon in $config_build_addons_extra; do
    (
        repo=$(awk '{ print $2 }' ../addons/$addon/$addon.txt)
        branch=$(awk '{ print $3 }' ../addons/$addon/$addon.txt)
        print_log info "Configure addon $addon, fetching from $repo, branch $branch"
        git clone $repo && cd $addon && mkdir -p build && cd build
        eval $config_build_env cmake $CMAKECONF -DADDONS_TO_BUILD=$addon -DADDON_SRC_PREFIX=../.. -DOVERRIDE_PATHS=1 -DCMAKE_INSTALL_DESTDIR=$PREFIX -DCMAKE_INSTALL_PREFIX=$XBIANPKGDIR/content/$PREFIX \
            -DADDONS_DEPENDS_PATH=$(readlink -f ../../../depends) $(readlink -f ../../../.)
    )
done
